{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#obsidian-modal-form-plugin","title":"Obsidian Modal Form Plugin","text":"<p>This plugin for Obsidian allows you to define forms that can be opened from anywhere you can run JavaScript, so you can combine it with other plugins like Templater or QuickAdd.</p> <p>https://github.com/danielo515/obsidian-modal-form/assets/2270425/542974aa-c58b-4733-89ea-9c20ea11bee9</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Forms open in a modal window and return you the values, so you can trigger it from:<ul> <li>Templater templates</li> <li>QuickAdd captures</li> <li>DataviewJS queries</li> <li>Many other places...</li> </ul> </li> <li>Define forms using a simple JSON format</li> <li>Create and manage a collection of forms, each identified by a unique name</li> <li>User interface for creating new forms</li> <li>Create new notes directly from the form using templates<ul> <li>Template editor has a nice UI for creating templates</li> </ul> </li> <li>Many input types<ul> <li>number</li> <li>date</li> <li>time</li> <li>slider</li> <li>toggle (true/false)</li> <li>free text</li> <li>text with autocompletion for note names (from a folder or root)</li> <li>text with autocompletion from a dataview query (requires dataview plugin)</li> <li>multiple choice input</li> <li>select from a list<ul> <li>list of fixed values</li> <li>list of notes from a folder</li> </ul> </li> </ul> </li> </ul>"},{"location":"#template-builder","title":"Template builder","text":"<p>We have a nice UI to help you creating the required templates. </p>"},{"location":"#why-this-plugin","title":"Why this plugin?","text":"<p>Obsidian is a great tool for taking notes, but it is also a nice for managing data. However, when it's time to capture structured data it doesn't offer many conveniences. Some plugins like Templater or QuickAdd alleviate this problem with templates/automation that ease the creation of notes with a predefined structure, but then you have to fill the data manually. The mentioned plugins (Templater, QuickAdd) have some little convenience inputs, but they have certain tradeoffs/problems:</p> <ul> <li>they are limited to inputting a single value at a time</li> <li>they don't have labels or detailed descriptions about the field you are filling</li> <li>you can't skip fields, you will always be prompted for all of them one by one</li> </ul> <p>All of the mentioned tools are great at their job and unleash super convenient workflows. For that reason, rather than offering an alternative, this plugin is designed as a complement to them, offering some basic building blocks that you can integrate with your existing templates and workflows.</p>"},{"location":"#friends-of-modal-form","title":"Friends of modal form","text":"<ul> <li>Templater to open modals from templates</li> <li>QuickAdd to quickly capture data from a modal</li> <li>dataview to provide values for auto-completion</li> </ul>"},{"location":"#scope-of-this-plugin","title":"Scope of this plugin","text":"<p>This plugin is intentionally narrow in scope. As mentioned in the previous section, it is designed as a building block, so you can integrate it with other plugins and workflows. The only features that I will consider adding will be ones about improving the form itself.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#call-the-form-from-javascript","title":"Call the form from JavaScript","text":"<p>Since the main usage of this plugin is opening forms and getting back their data let's start with that. If you want to learn how to create forms, skip to the next section define a form.</p> <p>The plugin exposes an API that can be accessed from any JavaScript code that has access to the global <code>app</code> object. So, in order to get the API you can do:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\n</code></pre> <p>From here you can call any of the main methods of the API, <code>openForm</code> which allows you to open a form by name and get back the data. Let's see an example:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm(\"example-form\");\n</code></pre> <p>The result is a special type of object that contains the data of the form. It also has some convenient methods to help you process the returned data. One of them is <code>asFrontmatterString</code>, which returns the data as a string that can be used in a frontmatter block. Let's see an example using Templater:</p>"},{"location":"#usage-with-templater","title":"Usage with Templater","text":"<pre><code>---\n&lt;%*\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm('example-form');\ntR += result.asFrontmatterString();\n-%&gt;\n---\n</code></pre> <p>When you insert this template in a note, it will open the form, and once you submit it, it will insert the data in the note as a frontmatter block.</p>"},{"location":"#usage-with-quickadd","title":"Usage with QuickAdd","text":"<p>In order to open a form from QuickAdd capture, you need to create a capture and activate the capture format, then in the format text-area you must create a code block with the language defined as <code>js quickadd</code> and copy the code below:</p> <pre><code>```js quickadd\n    const modalForm = app.plugins.plugins.modalforms.api;\n    const result = await modalForm.openForm('example-form');\n    return result.asDataviewProperties();\n```\n</code></pre> <p>Here you have an example screenshot of how it should look like: </p>"},{"location":"#providing-default-values-when-opening-a-form","title":"Providing Default Values When Opening a Form","text":"<p>When opening a form you can provide default values for the form fields. This can be done by passing an object to the <code>openForm</code> or <code>limitedForm</code> methods as part of the <code>FormOptions</code> parameter. This object should have the same structure as the form definition, with each key corresponding to a field name and its value being the default value for that field.</p> <p>Here's an example:</p> <pre><code>const values = {\n    title: \"My Default Title\",\n    description: \"This is a default description.\",\n};\n\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm(\"example-form\", { values: values });\n</code></pre> <p>In this example, the form will open with the <code>title</code> field pre-filled with <code>My Default Title</code> and the <code>description</code> field pre-filled with <code>This is a default description.</code>.</p> <p>Note: If a field in the default values object does not exist in the form definition, it will be ignored.</p>"},{"location":"#formresult-methods","title":"FormResult Methods","text":"<p>When you open a form, you get back a <code>FormResult</code> object. This object contains the data of the form and some methods to help you process it. This <code>FormResult</code> object returned by the <code>openForm</code> method has several methods that can be used to process the form data. Here is a brief description of each method:</p>"},{"location":"#asfrontmatterstring","title":"asFrontmatterString()","text":"<p>This method returns the form data as a string that can be used in a frontmatter block. It formats the data in YAML syntax. Here is an example of how to use it:</p>"},{"location":"#asdataviewproperties","title":"asDataviewProperties()","text":"<p>This method returns the form data as a string of dataview properties. Each key-value pair in the form data is converted into a string in the format <code>key:: value</code>. Here is an example of how to use it:</p>"},{"location":"#getdata","title":"getData()","text":"<p>This method returns a copy of the form data. It can be used when you need to manipulate the form data without affecting the original data.</p>"},{"location":"#asstringtemplate-string","title":"asString(template: string)","text":"<p>This method returns the form data formatted as a string matching the provided template. The template is a string that can contain placeholders in the format <code>{{key}}</code>, which will be replaced with the corresponding value from the form data. Here is an example of how to use it in a templater template:</p> <pre><code>&lt;%*\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm('example-form');\ntR += result.asString('{{Name}} is {{age}} years old and his/her favorite food is {{favorite_meal}}. Family status: {{is_family}}');\n-%&gt;\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced usage","text":"<p>For more advanced usage of the <code>FormResult</code> methods please refer to the specific documentation of FormResult here</p>"},{"location":"#define-a-form","title":"Define a form","text":""},{"location":"#create-a-new-form","title":"Create a new form","text":"<p>Creating a new form is easy, you just need to open the manage forms view, either by clicking on the ribbon icon or by using the command palette (<code>Obsidian modal form: New form</code>). Once there, click on the <code>+</code> button and you will be presented with a form to create a named form definition. The form is self-explanatory, but here are some key points you need to keep in mind:</p> <ul> <li>The name must be unique, and it will be used to identify the form when you open it from JavaScript, case-sensitive</li> <li>The title is what you will see as a header in the modal window when you open the form</li> <li>You will not be able to save the form unless all the fields are valid (which means they have a name and a type)</li> </ul> <p></p>"},{"location":"#dataview-integration","title":"Dataview integration","text":"<p>Modal Form integrates with Dataview to provide powerful data querying capabilities in your forms. You can use Dataview queries to:</p> <ul> <li>Create dynamic input fields with suggestions from your vault</li> <li>Generate dynamic content in document and markdown blocks based on form data</li> <li>Create interactive previews that update as users fill out the form</li> </ul> <p>For detailed documentation and examples, see Dataview Integration.</p> <p></p>"},{"location":"#inline-forms","title":"Inline forms","text":"<p>The plugin also supports inline forms, which are forms that are defined when you call the openForm method. This is useful when you want to create a form that is only used in one place and it is simple enough. However, note the format is a bit verbose for typing it manually and it is error-prone, so unless it is a very small form, you will most likely prefer to use a named form.</p> <p>Here is an example of how to use it:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm({\n    title: \"Example form\",\n    fields: [\n        {\n            name: \"name\",\n            label: \"Name\",\n            description: \"Your name\",\n            input: { type: \"text\" },\n        },\n        {\n            name: \"age\",\n            label: \"Age\",\n            description: \"Your age\",\n            input: { type: \"number\" },\n        },\n        {\n            name: \"favorite_meal\",\n            label: \"Favorite meal\",\n            description: \"Your favorite meal\",\n            input: { type: \"text\" },\n        },\n        {\n            name: \"is_family\",\n            label: \"Is family\",\n            type: \"toggle\",\n            description: \"Are you family?\",\n            required: true,\n            input: { type: \"toggle\" },\n        },\n    ],\n});\n</code></pre> <p>You can make it smaller by removing some of the optional fields like description or label, but I really encourage you to define them all.</p>"},{"location":"#tips-and-tricks","title":"Tips and tricks","text":"<ul> <li>How to make opening the forms more convenient</li> </ul>"},{"location":"#installing-the-plugin","title":"Installing the plugin","text":"<p>You can install the plugin directly from the Obsidian plugin store or through BRAT</p>"},{"location":"#installing-with-brat","title":"Installing with BRAT","text":"<ol> <li>Install the BRAT plugin (GitHub page) and enable it.</li> <li>Open the command palette and run the command BRAT: Add a beta plugin for testing.</li> <li>Enter <code>https://github.com/danielo515/obsidian-modal-form</code> into the modal and press the Add Plugin button.</li> <li>Return to the settings and navigate to the Community plugins tab.</li> <li>Enable the plugin.</li> </ol>"},{"location":"#manually-installing-the-plugin","title":"Manually installing the plugin","text":"<ul> <li>Copy over <code>main.js</code>, <code>styles.css</code>, <code>manifest.json</code> to your vault <code>VaultFolder/.obsidian/plugins/modalForm/</code>.</li> </ul>"},{"location":"#how-to-develop","title":"How to develop","text":"<ul> <li>Clone this repo.</li> <li>Make sure your NodeJS is at least v16 (<code>node --version</code>).</li> <li><code>npm i</code> or <code>yarn</code> to install dependencies.</li> <li><code>npm run dev</code> to start compilation in watch mode.</li> </ul>"},{"location":"#releasing-new-releases","title":"Releasing new releases","text":"<ul> <li>run <code>npm version patch</code>, <code>npm version minor</code>, or <code>npm version major</code> after updating <code>minAppVersion</code> manually in <code>manifest.json</code>.</li> <li>Upload the files <code>manifest.json</code>, <code>main.js</code>, <code>styles.css</code> as binary attachments. Note: The manifest.json file must be in two places, first the root path of your repository and also in the release.</li> <li>Publish the release.</li> </ul> <p>The command <code>npm version whatever</code> will bump version in <code>manifest.json</code> and <code>package.json</code>, and add the entry for the new version to <code>versions.json</code></p>"},{"location":"#publish-docs","title":"Publish docs","text":"<p>We use mkdocs to generate the documentation. To publish the docs, run:</p> <p>```bash ./build-docs.sh</p>"},{"location":"FormBuilder/","title":"FormBuilder Helper","text":"<p>The FormBuilder is a utility that helps you create forms programmatically using a fluent API. It's accessible through the Modal Form plugin API.</p>"},{"location":"FormBuilder/#getting-started","title":"Getting Started","text":"<p>Access the form builder through the plugin API:</p> <pre><code>\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst builder = modalForm.builder;\n\n// Create a new form\nconst form = builder(\"example-contact-form\", \"Example Contact Form\")\n  .text({ name: \"username\", label: \"Username\" })\n  .email({ name: \"email\", label: \"Email\" })\n  .build();\n\n// Open the form modal\nmodalForm.openForm(form);\n</code></pre>"},{"location":"FormBuilder/#core-methods","title":"Core Methods","text":""},{"location":"FormBuilder/#buildername-string-title-string","title":"builder(name: string, title?: string)","text":"<p>Creates a new form builder instance. The <code>name</code> parameter is required and must be unique. The <code>title</code> parameter is optional and defaults to the name.</p> <pre><code>const form = builder(\"example-form\", \"Example Form\")\n  // ... add fields\n  .build();\n</code></pre>"},{"location":"FormBuilder/#build","title":"build()","text":"<p>Finalizes the form creation and returns a form definition that can be used with <code>openModalForm</code>.</p> <pre><code>const form = builder(\"example-form\")\n  .text({ name: \"username\" })\n  .build();\n</code></pre>"},{"location":"FormBuilder/#field-methods","title":"Field Methods","text":"<p>Each field method accepts these common parameters:</p> <ul> <li><code>name</code>: (required) Unique identifier for the field</li> <li><code>label</code>: (optional) Display label for the field</li> <li><code>description</code>: (optional) Help text or description</li> <li><code>hidden</code>: (optional) Whether the field should be hidden</li> </ul>"},{"location":"FormBuilder/#text","title":"text","text":"<p>Adds a text input field.</p> <pre><code>builder(\"example-form\")\n  .text({ name: \"username\", label: \"Username\" })\n</code></pre>"},{"location":"FormBuilder/#number","title":"number","text":"<p>Adds a number input field.</p> <pre><code>builder(\"example-age-form\")\n  .number({ name: \"age\", label: \"Age\" })\n</code></pre>"},{"location":"FormBuilder/#date","title":"date","text":"<p>Adds a date input field.</p> <pre><code>builder(\"example-birthday-form\")\n  .date({ name: \"birthdate\", label: \"Birth Date\" })\n</code></pre>"},{"location":"FormBuilder/#time","title":"time","text":"<p>Adds a time input field.</p> <pre><code>builder(\"example-meeting-form\")\n  .time({ name: \"meeting\", label: \"Meeting Time\" })\n</code></pre>"},{"location":"FormBuilder/#datetime","title":"datetime","text":"<p>Adds a datetime input field.</p> <pre><code>builder(\"example-appointment-form\")\n  .datetime({ name: \"appointment\", label: \"Appointment\" })\n</code></pre>"},{"location":"FormBuilder/#textarea","title":"textarea","text":"<p>Adds a multi-line text input field.</p> <pre><code>builder(\"example-notes-form\")\n  .textarea({ name: \"notes\", label: \"Notes\" })\n</code></pre>"},{"location":"FormBuilder/#toggle","title":"toggle","text":"<p>Adds a toggle/switch input field.</p> <pre><code>builder(\"example-settings-form\")\n  .toggle({ name: \"active\", label: \"Active\" })\n</code></pre>"},{"location":"FormBuilder/#email","title":"email","text":"<p>Adds an email input field.</p> <pre><code>builder(\"example-contact-form\")\n  .email({ name: \"contact\", label: \"Contact Email\" })\n</code></pre>"},{"location":"FormBuilder/#tel","title":"tel","text":"<p>Adds a telephone number input field.</p> <pre><code>builder(\"example-phone-form\")\n  .tel({ name: \"phone\", label: \"Phone Number\" })\n</code></pre>"},{"location":"FormBuilder/#note","title":"note","text":"<p>Adds a note field that references an Obsidian note.</p> <pre><code>builder(\"example-reference-form\")\n  .note({ name: \"reference\", label: \"Reference\", folder: \"Notes\" })\n</code></pre>"},{"location":"FormBuilder/#folder","title":"folder","text":"<p>Adds a folder selection field.</p> <pre><code>builder(\"example-save-location-form\")\n  .folder({ name: \"destination\", label: \"Save Location\" })\n</code></pre>"},{"location":"FormBuilder/#slider","title":"slider","text":"<p>Adds a numeric slider input field.</p> <pre><code>builder(\"example-rating-form\")\n  .slider({ name: \"rating\", label: \"Rating\", min: 0, max: 5 })\n</code></pre>"},{"location":"FormBuilder/#tag","title":"tag","text":"<p>Adds a tag selection field.</p> <pre><code>builder(\"example-categories-form\")\n  .tag({ name: \"categories\", label: \"Categories\" })\n</code></pre>"},{"location":"FormBuilder/#select","title":"select","text":"<p>Adds a dropdown selection field.</p> <pre><code>builder(\"example-priority-form\")\n  .select({ \n    name: \"priority\", \n    label: \"Priority\", \n    options: [\"Low\", \"Medium\", \"High\"] \n  })\n</code></pre>"},{"location":"FormBuilder/#dataview","title":"dataview","text":"<p>Adds a field populated by a Dataview query.</p> <pre><code>builder(\"example-tasks-form\")\n  .dataview({ \n    name: \"tasks\", \n    label: \"Tasks\",\n    query: \"task from #project\" \n  })\n</code></pre>"},{"location":"FormBuilder/#multiselect","title":"multiselect","text":"<p>Adds a multiple selection field.</p> <pre><code>builder(\"example-tags-form\")\n  .multiselect({ \n    name: \"tags\", \n    label: \"Tags\",\n    options: [\"work\", \"personal\", \"urgent\"]\n  })\n</code></pre>"},{"location":"FormBuilder/#document_block","title":"document_block","text":"<p>Adds a document block field.</p> <pre><code>builder(\"example-document-form\")\n  .document_block({ \n    name: \"content\", \n    label: \"Content\",\n    body: \"Initial content\" \n  })\n</code></pre>"},{"location":"FormBuilder/#markdown_block","title":"markdown_block","text":"<p>Adds a markdown block field.</p> <pre><code>builder(\"example-markdown-form\")\n  .markdown_block({ \n    name: \"notes\", \n    label: \"Notes\",\n    body: \"# Notes\" \n  })\n</code></pre>"},{"location":"FormBuilder/#image","title":"image","text":"<p>Adds an image upload field.</p> <pre><code>builder(\"example-avatar-form\")\n  .image({ \n    name: \"avatar\", \n    label: \"Avatar\",\n    filenameTemplate: \"avatar-${date}\",\n    saveLocation: \"assets/images\" \n  })\n</code></pre>"},{"location":"FormBuilder/#file","title":"file","text":"<p>Adds a file upload field.</p> <pre><code>builder(\"example-attachment-form\")\n  .file({ \n    name: \"attachment\", \n    label: \"Attachment\",\n    folder: \"attachments\",\n    allowedExtensions: [\".pdf\", \".doc\", \".docx\"] \n  })\n</code></pre>"},{"location":"FormBuilder/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of creating and opening a contact form:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nconst form = modalForm.builder(\"example-contact-form\", \"Example Contact Form\")\n  .text({ name: \"name\", label: \"Full Name\" })\n  .email({ name: \"email\", label: \"Email Address\" })\n  .tel({ name: \"phone\", label: \"Phone Number\" })\n  .textarea({ name: \"message\", label: \"Message\" })\n  .build();\n\nmodalForm.openForm(form);\n</code></pre>"},{"location":"ResultValue/","title":"ResultValue","text":"<p>This class is a helper wrapper for values coming from a form Result. It provides a safer and convenient interface to render the contained value in various formats. The main purpose is to avoid the need to check for null or undefined values while having a convenient interface to print the value in a template.</p>"},{"location":"ResultValue/#usage","title":"Usage","text":"<p>All the following examples assume that the form has been opened with the following templater code:</p> <pre><code>&lt;%* const result = await forms.openForm('myForm'); %&gt;\n</code></pre>"},{"location":"ResultValue/#renderprinting-as-string","title":"Render/printing as string","text":"<p>By default, the value is rendered as a string. If the value is null or undefined, an empty string is returned. You don't need to call or do anything special to render the value as a string, just use it as if it was a string.</p> <pre><code>&lt;% result.getValue('firstField') %&gt;\n</code></pre> <p>if the value of the field is \"Hello World\", the above code will print \"Hello World\" in the resulting note. However, if the value is null or undefined, nothing will be printed.</p>"},{"location":"ResultValue/#renderprinting-as-bullet-list","title":"Render/printing as bullet list","text":"<p>You can render any value as a bullet list by using the <code>toBulletList()</code> method. If the value is an array, each element of the array will be printed as a bullet point. If the value is a primitive, like a number or a string, it will be printed as a single bullet point. If the value is null or undefined, an empty string is printed.</p> <pre><code>&lt;% result.getValue('listField').toBulletList() %&gt;\n</code></pre> <p>You can also use a shorthand for this method by using the <code>bullets</code> property:</p> <pre><code>&lt;% result.getValue('listField').bullets %&gt;\n</code></pre> <p>The above code is equivalent to the previous one.</p> <p>If the value of the field is <code>[\"Hello\", \"World\"]</code>, the above code will print:</p> <pre><code>- Hello\n- World\n</code></pre>"},{"location":"ResultValue/#renderprinting-as-dataview-field","title":"Render/printing as dataview field","text":"<p>You can render any value as a dataview field by using the <code>toDataviewField()</code> method or the shorthand <code>toDv()</code> alias.</p> <p>List values are rendered as a dataview list field, while primitive values are just rendered as a dataview field.</p> <pre><code>&lt;% result.getValue('listField').toDataviewField() %&gt;\nOr alias:\n&lt;% result.getValue('listField').toDv() %&gt;\n</code></pre> <p>if the value of the field is <code>[\"Hello\", \"World\"]</code>, the above code will print:</p> <pre><code>[listField:: \"Hello\", \"World\"]\n</code></pre> <p>If the value were a primitive, like the string \"Hello World\", the above code would print:</p> <pre><code>[listField:: Hello World]\n</code></pre>"},{"location":"ResultValue/#mapfn-value-any-any-resultvalue-method","title":"<code>map(fn: (value: any) =&gt; any): ResultValue</code> method","text":"<p>The map method is a powerful one that allows you to transform the value contained in the ResultValue object without extracting it, allowing you to chain multiple transformations.</p> <pre><code>&lt;% result.getValue('listField').map((value) =&gt; value.toUpperCase()).bullets %&gt;\n</code></pre> <p>The above code will print the list field as a bullet list, but all the values will be uppercased.</p> <p>The map method takes a function that takes the value and returns a new value. It can be used when none of the provided printing are enough for your use case, or when one of them is almost what you need but you need to transform the value a bit more.</p>"},{"location":"ResultValue/#trimmedlowerupper-shortcuts","title":"<code>trimmed</code>,<code>lower</code>,<code>upper</code> shortcuts","text":"<p>The ResultValue class provides some shortcuts to common transformations of the value. They are:</p> <ul> <li><code>trimmed</code>: Trims the value, removing any leading or trailing whitespace.</li> <li><code>lower</code>: Converts the value to lowercase.</li> <li><code>upper</code>: Converts the value to uppercase.</li> </ul> <p>All of these shortcuts return a new ResultValue object, so you can chain them with other methods.</p> <pre><code>&lt;% result.getValue('listField').trimmed.upper.bullets %&gt;\n</code></pre> <p>The above code will print the list field as a bullet list, but all the values will be uppercased and trimmed. You can chain as many or as little as you want. The most common use is probably just to use one of them, like <code>trimmed</code> or <code>upper</code>.</p> <pre><code>&lt;% result.getValue('myField').trimmed %&gt;\n</code></pre> <p>All of this shortcuts are able to handle single values and lists, so you can use them with any value.</p>"},{"location":"ResultValue/#link-method","title":"<code>link</code> method","text":"<p>The <code>link</code> method is a convenience method to render the value as a markdown link. If the value is a string, it will be rendered as a markdown link. If the value is a FileProxy (right now just used for images), it will be rendered as an embedded link. Any other type of value will be rendered as an empty string.</p> <pre><code>&lt;% result.getValue('myField').link %&gt;\n</code></pre> <p>You can also use the shorthand way of accessing values directly from the form result object, like <code>result.myField.link</code>.</p> <p>Take a look at the example vault to see how it is used.</p>"},{"location":"advanced-examples/","title":"Advanced usage examples","text":"<p>In this section of the docs you will find some advanced usage examples of modal-form-plugin</p>"},{"location":"advanced-examples/#nesting-form-calls","title":"Nesting form calls","text":""},{"location":"advanced-examples/#modifying-frontmatter-with-a-form","title":"Modifying frontmatter with a form","text":"<p>If you want to modify the content of a notes frontmatter with one of your existing forms, put the following snippet in a templater template, substituting the name of your form:</p> <pre><code>&lt;%*\nconst modalForm = app.plugins.plugins.modalforms.api;\n  const run = async (frontmatter) =&gt; {\n    const result = await modalForm.openForm('frontmatter', {\n      values: { ...frontmatter },\n    });\n    return result.getData();\n  };\n  //first we get the data from the form\n  const data = await run(tp.frontmatter);\n // Then we update the frontmatter with the new data\n  app.fileManager.processFrontMatter(\n    tp.config.target_file,\n    frontmatter =&gt; {\n      Object.assign(frontmatter, data);\n    },\n  );\n%&gt;\n</code></pre> <p>Please be aware that this is not atomic, so if if something edits the frontmatter while you are editing it within the form, the form values will not reflect this change and you may be overwriting some changes. Although this is unlikely to happen, it is better to be aware of it.</p> <p>The values the form understand and that are present in the frontmatter, will be populated with the values on the frontmatter. Then, when you submit the form, the new values will overwrite the old ones, leaving the rest untouched.</p>"},{"location":"advanced-examples/#making-calling-forms-more-convenient","title":"Making calling forms more convenient","text":"<p>If you are using templater, you can make calling forms more convenient by using the following snippet:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nmodule.exports = (formName, options) =&gt; modalForm.openForm(formName, options);\n</code></pre> <p>If you save this snippet as <code>openForm.js</code> in your templater snippets folder, then you can then call it like this from templater:</p> <pre><code>&lt;%*\nconst result = await tp.user.openForm('example-form', { values: { size: 'large' }});\n%&gt;\n</code></pre>"},{"location":"advanced-examples/#exclude-subfolders-when-selecting-notes-from-a-folder","title":"Exclude subfolders when selecting notes from a folder","text":"<p>Instead of using the <code>note</code> type or the <code>note</code> source (in case of multi-select) in your form, which doesn't support exclusions yet, we will use <code>dataview</code> (either type or as a multi-select source) to get the notes we want. Then use the following query to exclude subfolders:</p> <pre><code>dv.pages('\"Data\" AND -\"Data/Nested\"').file.name;\n</code></pre> <p>Here <code>Data</code> is the folder we want to get notes from and <code>Data/Nested</code> is the subfolder we want to exclude. Please keep in mind that <code>dataview</code> is very sensitive to spaces and quotes. Removing the nested <code>\"</code> will not work, or adding a space after the <code>-</code> will not work either.</p>"},{"location":"advanced-examples/#adding-additional-items-to-a-dataview-input","title":"Adding additional items to a Dataview Input","text":"<p>The <code>dataview</code> field it is just some expression that gets evaluated, and the values are what are shown in the input form. It can be a single <code>dataview</code> command, or it can be more things, like concatenation of results like this:</p> <pre><code>['1','2', ...dv.pages('#programming').title]\n</code></pre> <p>Which will look like this in the form:</p> <p></p> <p>You can take advantage of the preview to experiment a bit with what you will get in the input</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#1602-2025-03-29","title":"1.60.2 (2025-03-29)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>form-runtime: handle outside clicks and X button (ee383d7), closes #374</li> </ul>"},{"location":"changelog/#1601-2025-03-02","title":"1.60.1 (2025-03-02)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>update release-please and try to force it (96f93c0)</li> </ul>"},{"location":"changelog/#1600-2025-02-18","title":"1.60.0 (2025-02-18)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>fields: provide form fields to dataview inputs (4f209ce)</li> </ul>"},{"location":"changelog/#1590-2025-02-01","title":"1.59.0 (2025-02-01)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add tests (0aea8dd)</li> <li>build forms programmatically (5701614)</li> <li>ensure at the type level the builder implements all the fields (d9f3c4a)</li> </ul>"},{"location":"changelog/#1580-2025-01-31","title":"1.58.0 (2025-01-31)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>preview forms from form manager (58b8914)</li> </ul>"},{"location":"changelog/#1570-2024-12-20","title":"1.57.0 (2024-12-20)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>parser: add support for parsing transformations (2dbe84c)</li> <li>template: execute transformations when applying templates (7552a2a)</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>import forms not working (e9c64c2)</li> </ul>"},{"location":"changelog/#1560-2024-12-19","title":"1.56.0 (2024-12-19)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>core: template service to use any available template engine to post-process templates (a3f9d4e)</li> <li>templates: ask templater to run on form template insertion (2a10a25)</li> <li>templates: offer retry on templater errors (64dae86)</li> <li>templates: post-process templates using templater (ea01cd9)</li> </ul>"},{"location":"changelog/#1550-2024-12-12","title":"1.55.0 (2024-12-12)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>input: you can define a parent folder on the folder input (d208648)</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>remove deprecated usages (96aed30)</li> </ul>"},{"location":"changelog/#1540-2024-12-11","title":"1.54.0 (2024-12-11)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>builder: File input builder (48b62af)</li> <li>input: file input schema and rendering (b4682ff)</li> </ul>"},{"location":"changelog/#1530-2024-12-09","title":"1.53.0 (2024-12-09)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>input: added Image input type (cfc0cad)</li> </ul>"},{"location":"changelog/#1520-2024-09-29","title":"1.52.0 (2024-09-29)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>form-runtime: markdown block input (567d391)</li> </ul>"},{"location":"changelog/#1510-2024-09-13","title":"1.51.0 (2024-09-13)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>create an example vault (6c1f7c8)</li> <li>form-builder: add ability to hide fields to the UI (1af3b2d)</li> <li>form-engine: basic inputs can be hidden (6b5d17f)</li> </ul>"},{"location":"changelog/#1500-2024-07-10","title":"1.50.0 (2024-07-10)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>logger instance (a30a9ff)</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>provide a logger implementation that only shows debug messages on debug (72faa20)</li> </ul>"},{"location":"changelog/#1490-2024-07-05","title":"1.49.0 (2024-07-05)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>runtime: allow the select to be used as condition for other  fields (0d23e0b)</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>builder: properly save the isSet condition (1ffe488)</li> </ul>"},{"location":"changelog/#1480-2024-07-02","title":"1.48.0 (2024-07-02)","text":""},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>conditional input form builder (5f6a9be)</li> <li>runtime: conditional fields v1 (4ab141e)</li> <li>runtime: show conditional errors in the form (83a1060)</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>ConditionInput finally works as expected (c5d5fff)</li> </ul>"},{"location":"changelog/#1470-2024-06-22","title":"1.47.0 (2024-06-22)","text":""},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>group error messages (e0e9423)</li> <li>remove completely the old way of rendering fields (801d331)</li> <li>runtime: svelte versions of DocumentBlock and InputNote (968d230)</li> </ul>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>runtime: input tag in svelte (879aba9)</li> <li>runtime: svelte wrappers for obsidian settings (37f5236)</li> </ul>"},{"location":"changelog/#1460-2024-06-17","title":"1.46.0 (2024-06-17)","text":""},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>util: insert a form template into current note command (d60fe82)</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>templater: remove empty lines (eda92a2)</li> </ul>"},{"location":"changelog/#1452-2024-06-10","title":"1.45.2 (2024-06-10)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>runtime: better weights in file suggestions  (aac26d1), closes #272</li> </ul>"},{"location":"changelog/#1451-2024-06-04","title":"1.45.1 (2024-06-04)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>templater: flex wrap (4aed840)</li> </ul>"},{"location":"changelog/#1450-2024-06-04","title":"1.45.0 (2024-06-04)","text":""},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>templater: customize result name in template builder (16a2297)</li> <li>templater: easily build template body (b705136)</li> </ul>"},{"location":"changelog/#1441-2024-05-31","title":"1.44.1 (2024-05-31)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>show title in the template builder (012901d)</li> </ul>"},{"location":"changelog/#1440-2024-05-30","title":"1.44.0 (2024-05-30)","text":""},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>more customizations in the generated template (6db7d29)</li> </ul>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>easy toggle all for fields to include in frontmatter (8bf4fb4)</li> </ul>"},{"location":"changelog/#1430-2024-05-30","title":"1.43.0 (2024-05-30)","text":""},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>ability to open template builder form UI (c6663ff)</li> <li>add a view for template builder (f32ebfb)</li> <li>copy to clipboard and better format (e3e3249)</li> <li>open TemplateBuilder in a modal (e376cd0)</li> <li>std: updateFirst for Array (e6f28e1)</li> </ul>"},{"location":"changelog/#1421-2024-05-14","title":"1.42.1 (2024-05-14)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>set initial value of fixed-source select fields, if provided (8864226)</li> </ul>"},{"location":"changelog/#1420-2024-05-13","title":"1.42.0 (2024-05-13)","text":""},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>cancel esc button for cancel the form (ea350bf)</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>formEngine: gracefully handle the close of the form (a398882)</li> </ul>"},{"location":"changelog/#1410-2024-05-10","title":"1.41.0 (2024-05-10)","text":""},{"location":"changelog/#features_19","title":"Features","text":"<ul> <li>input: dataview input can be fully async (cac23bb)</li> <li>input: document block is async (1e23a1b)</li> <li>std: make the function evaluator async and handle TE (239a4d5)</li> <li>suggesters: DataviewSuggest is now async (dae4a25)</li> <li>suggesters: make SafeDataviewQuery async (239a4d5)</li> </ul>"},{"location":"changelog/#1404-2024-04-25","title":"1.40.4 (2024-04-25)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>make the editor headers stick only on big screens (4193246)</li> </ul>"},{"location":"changelog/#1403-2024-04-20","title":"1.40.3 (2024-04-20)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>allow decimal inputs for number fields (b70e99a), closes #237</li> </ul>"},{"location":"changelog/#1402-2024-01-22","title":"1.40.2 (2024-01-22)","text":""},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>support html in the document_block (1717937)</li> </ul>"},{"location":"changelog/#1401-2024-01-21","title":"1.40.1 (2024-01-21)","text":""},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>a bit better import UI (024b513)</li> <li>button to open import modal from form manager (1cc834e)</li> </ul>"},{"location":"changelog/#1400-2024-01-21","title":"1.40.0 (2024-01-21)","text":""},{"location":"changelog/#features_20","title":"Features","text":"<ul> <li>API: expose some utils (eb54365)</li> <li>import form modal (a844983)</li> <li>import: ability to edit forms imported from JSON (6cdb104)</li> </ul>"},{"location":"changelog/#1391-2024-01-17","title":"1.39.1 (2024-01-17)","text":""},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>tag should allow unknown values (4dec090)</li> </ul>"},{"location":"changelog/#1390-2024-01-14","title":"1.39.0 (2024-01-14)","text":""},{"location":"changelog/#features_21","title":"Features","text":"<ul> <li>multi select notes uses the new notes input (better UI and search) (6c3e1e5)</li> </ul>"},{"location":"changelog/#1380-2024-01-13","title":"1.38.0 (2024-01-13)","text":""},{"location":"changelog/#features_22","title":"Features","text":"<ul> <li>core: enrich_tfile utility function (1cf4508)</li> <li>form: the input file is now fuzzy over path and tags. It shows a nicer UI that includes the path (38dc4b3)</li> <li>input: note suggest shows the parent folder of the note (6409ebf)</li> </ul>"},{"location":"changelog/#1370-2024-01-06","title":"1.37.0 (2024-01-06)","text":""},{"location":"changelog/#features_23","title":"Features","text":"<ul> <li>command to directly edit a form (47d4d8c)</li> </ul>"},{"location":"changelog/#1361-2024-01-06","title":"1.36.1 (2024-01-06)","text":""},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>form-runtime: show an asterisk when fields are required (b578ace), closes #198</li> </ul>"},{"location":"changelog/#1360-2024-01-02","title":"1.36.0 (2024-01-02)","text":""},{"location":"changelog/#features_24","title":"Features","text":"<ul> <li>allow any value in multi-select dataview (fa9da3d), closes #54</li> <li>multi-select fixed can allow unknown values (dcefe7c)</li> <li>tags input allow any value to be selected, even if it does not exist yet (1834bf5)</li> </ul>"},{"location":"changelog/#1350-2024-01-01","title":"1.35.0 (2024-01-01)","text":""},{"location":"changelog/#features_25","title":"Features","text":"<ul> <li>option to have a global shortcut to modal form (d262a0e)</li> </ul>"},{"location":"changelog/#1340-2023-12-29","title":"1.34.0 (2023-12-29)","text":""},{"location":"changelog/#features_26","title":"Features","text":"<ul> <li>dataview query preview in FormBuilder (0a5b4cd)</li> <li>real time query preview with errors (41a7dec)</li> </ul>"},{"location":"changelog/#1330-2023-12-28","title":"1.33.0 (2023-12-28)","text":""},{"location":"changelog/#features_27","title":"Features","text":"<ul> <li>dataview rendering method for FormValue (86839ce)</li> <li>FormResult is now a proxy, so you can access the contained result values safely and directly (3f4a611)</li> <li>result value helpers for better user experience (57f2c1b)</li> <li>shortcut methods for the ResultValue helper (00ba405)</li> </ul>"},{"location":"changelog/#1321-2023-12-22","title":"1.32.1 (2023-12-22)","text":""},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>inline help for dataview (d7e0630)</li> </ul>"},{"location":"changelog/#1320-2023-12-17","title":"1.32.0 (2023-12-17)","text":""},{"location":"changelog/#features_28","title":"Features","text":"<ul> <li>template: add support for frontmatter command in templates (059891c)</li> </ul>"},{"location":"changelog/#1310-2023-12-17","title":"1.31.0 (2023-12-17)","text":""},{"location":"changelog/#features_29","title":"Features","text":"<ul> <li>added a get method for result data fixes #129 (ddee8a8)</li> </ul>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>add aliases for Result methods fixes #122 (d6f755c)</li> </ul>"},{"location":"changelog/#1301-2023-12-16","title":"1.30.1 (2023-12-16)","text":""},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>creation of unique note name (b40b2c3)</li> <li>prevent chalk to be loaded in bundle (37e4508)</li> </ul>"},{"location":"changelog/#1300-2023-12-15","title":"1.30.0 (2023-12-15)","text":""},{"location":"changelog/#features_30","title":"Features","text":"<ul> <li>create new notes from forms using templates (2a5d1bc)</li> </ul>"},{"location":"changelog/#1290-2023-12-08","title":"1.29.0 (2023-12-08)","text":""},{"location":"changelog/#features_31","title":"Features","text":"<ul> <li>input: new input folder suggester (2102619), closes #148</li> </ul>"},{"location":"changelog/#1280-2023-12-07","title":"1.28.0 (2023-12-07)","text":""},{"location":"changelog/#features_32","title":"Features","text":"<ul> <li>API: example form takes options (d204786)</li> <li>core: throttle error messages (60157bd)</li> <li>document how to make more convenient opening forms (0c70eae), closes #145</li> <li>form-editor: UI to set fields as required (c77c340)</li> <li>form-runtime: the form is now reactive (ad82789)</li> <li>validation: better UI for notify errors of form (2a609ae)</li> </ul>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>add a link to the docs in the settings (704aa99), closes #58</li> <li>functional form engine (ab99b0e)</li> <li>input: multi-select refocus on enter (6f8d2ca)</li> <li>preettier invalid form view in form manager (b256a1a)</li> </ul>"},{"location":"changelog/#1271-2023-11-23","title":"1.27.1 (2023-11-23)","text":""},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>remove leading # in tags (556b769)</li> </ul>"},{"location":"changelog/#1270-2023-11-22","title":"1.27.0 (2023-11-22)","text":""},{"location":"changelog/#features_33","title":"Features","text":"<ul> <li>input: tag suggest input, initial version (9f0d8af), closes #118</li> </ul>"},{"location":"changelog/#1260-2023-11-07","title":"1.26.0 (2023-11-07)","text":""},{"location":"changelog/#features_34","title":"Features","text":"<ul> <li>ability to add a custom class name to the form body (28d81b9), closes #125</li> </ul>"},{"location":"changelog/#1250-2023-11-06","title":"1.25.0 (2023-11-06)","text":""},{"location":"changelog/#features_35","title":"Features","text":"<ul> <li>make the dataview input more fuzzy (1971fdc)</li> </ul>"},{"location":"changelog/#1241-2023-11-04","title":"1.24.1 (2023-11-04)","text":""},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>input: if folder does not exist, the form does not fail (0d5afbd), closes #90</li> </ul>"},{"location":"changelog/#1240-2023-11-03","title":"1.24.0 (2023-11-03)","text":""},{"location":"changelog/#features_36","title":"Features","text":"<ul> <li>editor: create dataview inputs (75f71f1)</li> <li>inputs: dataview can be used as source for multi-select (cd39785), closes #50</li> </ul>"},{"location":"changelog/#1230-2023-11-02","title":"1.23.0 (2023-11-02)","text":""},{"location":"changelog/#features_37","title":"Features","text":"<ul> <li>specific field/input error reporting methods (3bfd22d)</li> </ul>"},{"location":"changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>forms can not be renamed (ab2e20d), closes #108</li> <li>ManageForms view is now reactive thanks to stores (040f8f5)</li> </ul>"},{"location":"changelog/#1221-2023-10-26","title":"1.22.1 (2023-10-26)","text":""},{"location":"changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>big bundle size (e5f566e)</li> </ul>"},{"location":"changelog/#1220-2023-10-26","title":"1.22.0 (2023-10-26)","text":""},{"location":"changelog/#features_38","title":"Features","text":"<ul> <li>allow pick/omit in Result helpers (1c5bd5f), closes #101</li> </ul>"},{"location":"changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>add tests for result class and helpers (e4eea18)</li> <li>dataview list format is now correct (e4eea18)</li> </ul>"},{"location":"changelog/#1210-2023-10-25","title":"1.21.0 (2023-10-25)","text":""},{"location":"changelog/#features_39","title":"Features","text":"<ul> <li>detect invalid data on data.json (91aa99c), closes #98</li> <li>migrate between form format versions (b4e6c96), closes #92</li> </ul>"},{"location":"changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>add version to the form definition (c7fdd77)</li> <li>proper duplicate scroll (28cebd4)</li> </ul>"},{"location":"changelog/#1200-2023-10-22","title":"1.20.0 (2023-10-22)","text":""},{"location":"changelog/#features_40","title":"Features","text":"<ul> <li>Enable Ctrl+Enter form submission (#60) (7f72122)</li> </ul>"},{"location":"changelog/#1190-2023-10-22","title":"1.19.0 (2023-10-22)","text":""},{"location":"changelog/#features_41","title":"Features","text":"<ul> <li>Export form as JSON button (#29) (defc86c)</li> <li>scroll to elements on the list (f9804a7)</li> <li>scroll to new fields in the editor (ce3ece5)</li> </ul>"},{"location":"changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>accept empty option values for now (6293dad)</li> <li>ensure types in svelte at build (fbe03d3)</li> <li>pipelines install (2c9a17f)</li> <li>type check also svelte files (903b9bf)</li> <li>type narrow on svelte (c46dc40)</li> </ul>"},{"location":"changelog/#1180-2023-10-21","title":"1.18.0 (2023-10-21)","text":""},{"location":"changelog/#features_42","title":"Features","text":"<ul> <li>ability to order select options (#64) (b955726)</li> </ul>"},{"location":"changelog/#1170-2023-10-20","title":"1.17.0 (2023-10-20)","text":""},{"location":"changelog/#features_43","title":"Features","text":"<ul> <li>added tests (1230a34)</li> <li>show errors when form has any invalid field (54e9eaf)</li> </ul>"},{"location":"changelog/#1166-2023-10-19","title":"1.16.6 (2023-10-19)","text":""},{"location":"changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>remove all trace of text input suggest (68cace2)</li> </ul>"},{"location":"changelog/#1165-2023-10-19","title":"1.16.5 (2023-10-19)","text":""},{"location":"changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>separate input builder for select (e75a1f4), closes #75</li> </ul>"},{"location":"changelog/#1164-2023-10-16","title":"1.16.4 (2023-10-16)","text":""},{"location":"changelog/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>do not close existing leafs, reuse instead (b00b6b8), closes #36</li> <li>open the main view in a new tab (b00b6b8)</li> </ul>"},{"location":"changelog/#1163-2023-10-16","title":"1.16.3 (2023-10-16)","text":""},{"location":"changelog/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>text-area initial value (f21b783)</li> </ul>"},{"location":"changelog/#1162-2023-10-11","title":"1.16.2 (2023-10-11)","text":""},{"location":"changelog/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>make multi-select static work (fa5987a), closes #63</li> </ul>"},{"location":"changelog/#1161-2023-10-10","title":"1.16.1 (2023-10-10)","text":""},{"location":"changelog/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>ensure order of fixed select (62b407e), closes #61</li> </ul>"},{"location":"changelog/#1160-2023-10-03","title":"1.16.0 (2023-10-03)","text":""},{"location":"changelog/#features_44","title":"Features","text":"<ul> <li>add multi-line text area (1cf1559), closes #46</li> </ul>"},{"location":"changelog/#1150-2023-10-02","title":"1.15.0 (2023-10-02)","text":""},{"location":"changelog/#features_45","title":"Features","text":"<ul> <li>default values support for most input types (f8415a3)</li> </ul>"},{"location":"changelog/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>do not use innerHTML (8ae7d5b)</li> </ul>"},{"location":"changelog/#1141-2023-09-29","title":"1.14.1 (2023-09-29)","text":""},{"location":"changelog/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>properly clone elements (667ebe0), closes #51</li> <li>set a default value for inputs of type select (2c514b1), closes #45</li> </ul>"},{"location":"changelog/#1140-2023-09-15","title":"1.14.0 (2023-09-15)","text":""},{"location":"changelog/#features_46","title":"Features","text":"<ul> <li>show result preview (7425df1)</li> </ul>"},{"location":"changelog/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>filtering in multi with uppercase (fac67ea)</li> <li>multi select was not including the values (1885834)</li> </ul>"},{"location":"changelog/#1130-2023-09-15","title":"1.13.0 (2023-09-15)","text":""},{"location":"changelog/#features_47","title":"Features","text":"<ul> <li>limitedForm api (b0acb29), closes #39</li> </ul>"},{"location":"changelog/#1121-2023-09-15","title":"1.12.1 (2023-09-15)","text":""},{"location":"changelog/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>make sure the editor always has the right height (53f10b3), closes #38</li> </ul>"},{"location":"changelog/#1120-2023-09-15","title":"1.12.0 (2023-09-15)","text":""},{"location":"changelog/#features_48","title":"Features","text":"<ul> <li>multi select UI builder (3eff7a8)</li> <li>multi-select v1 (e3ee492)</li> </ul>"},{"location":"changelog/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>proper colors for save and close (4c6d495)</li> <li>toggles always have a value (72cfc3e)</li> </ul>"},{"location":"changelog/#1110-2023-09-14","title":"1.11.0 (2023-09-14)","text":""},{"location":"changelog/#features_49","title":"Features","text":"<ul> <li>preview form from the editor (2d8e2d6), closes #17</li> </ul>"},{"location":"changelog/#1100-2023-09-14","title":"1.10.0 (2023-09-14)","text":""},{"location":"changelog/#features_50","title":"Features","text":"<ul> <li>show better errors (8202d37)</li> </ul>"},{"location":"changelog/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>dataview input was not filtering (8202d37)</li> </ul>"},{"location":"changelog/#191-2023-09-14","title":"1.9.1 (2023-09-14)","text":""},{"location":"changelog/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>release process (790d84d)</li> </ul>"},{"location":"changelog/#190-2023-09-14","title":"1.9.0 (2023-09-14)","text":""},{"location":"changelog/#features_51","title":"Features","text":"<ul> <li>keep the form header always visible (216d9b4), closes #11</li> </ul>"},{"location":"changelog/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>release-bot (0586068)</li> </ul>"},{"location":"changelog/#180-2023-09-13","title":"1.8.0 (2023-09-13)","text":""},{"location":"changelog/#features_52","title":"Features","text":"<ul> <li>dataview input type (22b8949)</li> </ul>"},{"location":"changelog/#171-2023-09-13","title":"1.7.1 (2023-09-13)","text":""},{"location":"changelog/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>remove deprecated usages of app (343ff57)</li> </ul>"},{"location":"changelog/#170-2023-09-12","title":"1.7.0 (2023-09-12)","text":""},{"location":"changelog/#features_53","title":"Features","text":"<ul> <li>duplicate form (7a0f1c6), closes #20</li> </ul>"},{"location":"changelog/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>fix the versioning, I hope (7bb7d7d)</li> </ul>"},{"location":"changelog/#160-2023-09-12","title":"1.6.0 (2023-09-12)","text":""},{"location":"changelog/#features_54","title":"Features","text":"<ul> <li>allow to duplicate fields (21777e9), closes #20</li> </ul>"},{"location":"changelog/#150-2023-09-12","title":"1.5.0 (2023-09-12)","text":""},{"location":"changelog/#features_55","title":"Features","text":"<ul> <li>ability to cancel edits to a form (f90d7f0), closes #8</li> </ul>"},{"location":"changelog/#140-2023-09-11","title":"1.4.0 (2023-09-11)","text":""},{"location":"changelog/#features_56","title":"Features","text":"<ul> <li>decide where to open the forms editor/manager (bd5a957)</li> </ul>"},{"location":"changelog/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>make field name required (2892503)</li> </ul>"},{"location":"changelog/#130-2023-09-11","title":"1.3.0 (2023-09-11)","text":""},{"location":"changelog/#features_57","title":"Features","text":"<ul> <li>ability to order fields (79517c0)</li> </ul>"},{"location":"changelog/#122-2023-09-11","title":"1.2.2 (2023-09-11)","text":""},{"location":"changelog/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>rename the plugin to follow obsidian guidelines (2487590)</li> </ul>"},{"location":"changelog/#121-2023-09-11","title":"1.2.1 (2023-09-11)","text":""},{"location":"changelog/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>do not include v in tag (7a54a24)</li> </ul>"},{"location":"changelog/#120-2023-09-11","title":"1.2.0 (2023-09-11)","text":""},{"location":"changelog/#features_58","title":"Features","text":"<ul> <li>complete core decoding and validation (7fc538c)</li> <li>FormEditor V1 (ce228ef)</li> <li>manage forms view (bb99d2d)</li> <li>mobile handling of the form editor (1be84bd)</li> <li>suggest folder input (3adaf07)</li> </ul>"},{"location":"changelog/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>delete forms (70c6a77)</li> <li>icons (fca57dd)</li> </ul>"},{"location":"changelog/#110-2023-09-07","title":"1.1.0 (2023-09-07)","text":""},{"location":"changelog/#features_59","title":"Features","text":"<ul> <li>asString using template (5041673)</li> <li>real API v1 (1a8da2f)</li> <li>slider (bb9c0b5)</li> </ul>"},{"location":"changelog/#100-2023-09-06","title":"1.0.0 (2023-09-06)","text":""},{"location":"changelog/#features_60","title":"Features","text":"<ul> <li>add support for all the basic fields (991c53e)</li> <li>dataview serialization (9b38402)</li> <li>form result (2f63a90)</li> <li>initial prototype (ae1404a)</li> <li>note input with autocomplete and narrowed to specific folder (89bce4c)</li> <li>select input for notes narrowed to specific folder (89bce4c)</li> <li>select input with fixed number of elements (89bce4c)</li> <li>support numbers and text (5b27caf)</li> </ul>"},{"location":"dataview-integration/","title":"Dataview Integration","text":"<p>Modal Form integrates with Dataview to provide powerful data querying capabilities within your forms. This integration allows you to create dynamic forms that can interact with your vault's data in real-time.</p> <p>Looking for a step-by-step guide on creating forms with dependent dataview fields? Check out our Dependent Dataview Fields Guide.</p>"},{"location":"dataview-integration/#features","title":"Features","text":""},{"location":"dataview-integration/#1-dataview-input-fields","title":"1. Dataview Input Fields","text":"<p>You can create input fields that use Dataview queries to provide suggestions. This is useful when you want to select values from your vault based on certain criteria.</p> <p>Example:</p> <pre><code>// Show all files tagged with #book\ndv.pages('#book').file.name\n\n// Show all files in a specific folder\ndv.pages('\"Books\"').file.name\n\n// Show all unique values of a specific frontmatter field\ndv.pages().author.distinct()\n</code></pre>"},{"location":"dataview-integration/#2-dynamic-queries-using-form-data","title":"2. Dynamic Queries Using Form Data","text":"<p>When using Dataview queries in your input fields, you can access the current form data using the <code>form</code> variable. This allows you to create dynamic queries that depend on other field values.</p> <p>Example:</p> <pre><code>// Show suggestions based on the current value of the 'category' field\ndv.pages('#' + form.category).file.name\n\n// Filter pages based on multiple form fields\ndv.pages()\n  .where(p =&gt; p.type == form.type &amp;&amp; p.status == form.status)\n  .file.name\n</code></pre>"},{"location":"dataview-integration/#3-dataview-in-document-blocks","title":"3. Dataview in Document Blocks","text":"<p>Document blocks can use Dataview to display dynamic content based on form data. This is useful for showing previews, summaries, or related information as users fill out the form.</p> <p>Example:</p> <pre><code>// Show a list of related items based on form data\nreturn dv.pages('#' + form.category)\n  .where(p =&gt; p.rating &gt;= form.minRating)\n  .sort(p =&gt; p.rating, 'desc')\n  .limit(5)\n  .map(p =&gt; \"- \" + p.file.link + \" (Rating: \" + p.rating + \")\")\n  .join(\"\\n\")\n</code></pre>"},{"location":"dataview-integration/#4-dataview-in-markdown-blocks","title":"4. Dataview in Markdown Blocks","text":"<p>Markdown blocks can combine Dataview queries with form data to create dynamic markdown content. This is particularly useful for creating previews or generating structured content.</p> <p>Example:</p> <pre><code>// Generate a summary table based on form selections\nreturn dv.markdownTable(\n  [\"Name\", \"Rating\", \"Status\"],\n  dv.pages('#' + form.category)\n    .where(p =&gt; p.status == form.status)\n    .sort(p =&gt; p.rating, 'desc')\n    .map(p =&gt; [p.file.link, p.rating, p.status])\n)\n</code></pre>"},{"location":"dataview-integration/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling: Dataview queries in forms are executed in a sandboxed environment. Always ensure your queries handle cases where form fields might be undefined.</p> </li> <li> <p>Performance: Keep your queries focused and efficient. Use appropriate filters to limit the scope of the query.</p> </li> <li> <p>Accessing values: The <code>form</code> variable provides access to the values of the form fields. Because users can not have yet filled the field you are trying to access this may lead to errors. Make sure to check for existence before accessing any form fields or use javascript optional chaining (<code>?.</code>).</p> </li> <li> <p>Real-time Updates: Form data is automatically synchronized with your queries. When a form field changes, any dependent queries will be re-executed with the updated values.</p> </li> </ol>"},{"location":"dataview-integration/#examples","title":"Examples","text":"<p>Here are some practical examples of how to use Dataview integration in your forms:</p>"},{"location":"dataview-integration/#book-management-form","title":"Book Management Form","text":"<pre><code>// In a \"Series\" field, show suggestions based on the selected genre\ndv.pages('#book')\n  .where(p =&gt; p.genre == form.genre)\n  .series\n  .distinct()\n\n// In a document block, show a preview of similar books\nreturn dv.pages('#book')\n  .where(p =&gt; \n    p.genre == form.genre &amp;&amp; \n    p.rating &gt;= form.minRating &amp;&amp;\n    p.series == form.series\n  )\n  .sort(p =&gt; p.rating, 'desc')\n  .limit(3)\n  .map(p =&gt; `- ${p.file.link} (${p.rating}\u2b50)`)\n  .join(\"\\n\")\n</code></pre>"},{"location":"dataview-integration/#project-management-form","title":"Project Management Form","text":"<pre><code>// Show team members based on selected department\ndv.pages('#team-member')\n  .where(p =&gt; p.department == form.department)\n  .file.name\n\n// In a markdown block, generate a project summary\nreturn `## Project Summary\n**Team**: ${form.teamName}\n**Department**: ${form.department}\n\n### Team Members\n${dv.pages('#team-member')\n  .where(p =&gt; p.department == form.department)\n  .map(p =&gt; `- ${p.file.link} (${p.role})`)\n  .join(\"\\n\")}\n`\n</code></pre>"},{"location":"dataview-integration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Form Builder - Learn how to create forms with Dataview integration</li> <li>Managing Results - How to handle form results in your templates</li> <li>Advanced Examples - More complex examples of Dataview integration</li> </ul>"},{"location":"dependent-dataview-fields/","title":"Creating Forms with Dependent Dataview Fields","text":"<p>This guide provides a step-by-step approach to creating forms where dataview fields depend on previous form values to select different result sets.</p>"},{"location":"dependent-dataview-fields/#prerequisites","title":"Prerequisites","text":"<ul> <li>Modal Form plugin installed</li> <li>Dataview plugin installed and enabled</li> <li>Optionally Templater plugin installed for triggering the form and create new notes</li> </ul>"},{"location":"dependent-dataview-fields/#step-1-understanding-the-basics","title":"Step 1: Understanding the Basics","text":"<p>First, let's understand how the Modal Form plugin works with Dataview:</p> <ol> <li>Modal Form allows you to create forms with various field types</li> <li>Dataview fields can query your vault data dynamically</li> <li>Form values can be accessed using the <code>form</code> variable in dataview queries</li> <li>Changes to form fields automatically trigger updates to dependent dataview fields</li> </ol>"},{"location":"dependent-dataview-fields/#step-2-creating-a-basic-form-structure","title":"Step 2: Creating a Basic Form Structure","text":"<p>To create a form with dependent fields, start by creating a new form in the form manager. For this guide, we'll create a form named <code>dependent-books-test</code> which we'll reference in later steps.</p>"},{"location":"dependent-dataview-fields/#step-3-adding-primary-selection-fields","title":"Step 3: Adding Primary Selection Fields","text":"<p>Add fields that will influence subsequent dataview queries:</p> <p></p> <p>For the genre field, use a dataview query to get all unique genres:</p> <pre><code>dv.pages(\"#book\").genre.distinct().sort()\n</code></pre> <p>For the rating slider, set appropriate min and max values:</p> <pre><code>{\n  \"min\": 1,\n  \"max\": 5\n}\n</code></pre>"},{"location":"dependent-dataview-fields/#step-4-adding-dependent-dataview-fields","title":"Step 4: Adding Dependent Dataview Fields","text":"<p>Now add fields that depend on the values selected in the previous fields:</p> <p></p> <p>For the author field, filter by the selected genre:</p> <pre><code>dv.pages(\"#book\")\n  .where(p =&gt; p.genre == form.genre)\n  .author.distinct().sort()\n</code></pre> <p></p> <p>For the series field, filter by both genre and author:</p> <pre><code>dv.pages(\"#book\")\n  .where(p =&gt; p.genre == form.genre &amp;&amp; p.author == form.author)\n  .series.distinct().sort()\n</code></pre>"},{"location":"dependent-dataview-fields/#step-5-adding-a-preview-block","title":"Step 5: Adding a Preview Block","text":"<p>Add a markdown block to show a preview based on the current selections:</p> <p></p> <p>Use this query to display matching books:</p> <pre><code>return dv.pages(\"#book\")\n  .where(p =&gt; \n    p.genre == form.genre &amp;&amp; \n    p.rating &gt;= form.minRating &amp;&amp; \n    (form.author ? p.author == form.author : true) &amp;&amp; \n    (form.series ? p.series == form.series : true)\n  )\n  .sort(p =&gt; p.rating, \"desc\")\n  .limit(5)\n  .map(p =&gt; `- ${p.file.link} (${p.rating}\u2b50)`)\n  .join(\"\\n\")\n</code></pre>"},{"location":"dependent-dataview-fields/#step-6-adding-a-book-selection-field","title":"Step 6: Adding a Book Selection Field","text":"<p>Add a field to select a specific book based on all previous selections:</p> <pre><code>dv.pages(\"#book\")\n  .where(p =&gt; \n    p.genre == form.genre &amp;&amp; \n    p.rating &gt;= form.minRating &amp;&amp; \n    (form.author ? p.author == form.author : true) &amp;&amp; \n    (form.series ? p.series == form.series : true)\n  )\n  .sort(p =&gt; p.rating, \"desc\")\n  .file.name\n</code></pre>"},{"location":"dependent-dataview-fields/#step-7-using-the-form-in-a-template","title":"Step 7: Using the Form in a Template","text":"<p>Create a template to use your form:</p> <pre><code>&lt;%*\nconst result = await MF.openForm('dependent-books-test');\n\nif (result.status === \"ok\") {\n  // Generate note content based on form results\n  tR += `# ${result.fields.selectedBook}\\n\\n`;\n  tR += `## Reading Status\\n\\n`;\n  tR += `Current status: Reading\\n`;\n  tR += `Rating: ${result.fields.minRating}\u2b50\\n\\n`;\n  tR += `## Book Details\\n\\n`;\n  tR += `- **Author**: ${result.fields.author}\\n`;\n  tR += `- **Genre**: ${result.fields.genre}\\n`;\n  if (result.fields.series) {\n    tR += `- **Series**: ${result.fields.series}\\n`;\n  }\n  tR += `\\n\\n## Notes\\n\\n`;\n} else {\n  tR += \"Form was cancelled\";\n}\n%&gt;\n</code></pre>"},{"location":"dependent-dataview-fields/#step-8-error-handling-for-dependent-fields","title":"Step 8: Error Handling for Dependent Fields","text":"<p>When working with dependent fields, it's recommended to handle cases where previous fields haven't been filled yet. Here's one example of how to modify your queries to handle these cases:</p> <p>For the author field:</p> <pre><code>form.genre ? dv.pages(\"#book\")\n  .where(p =&gt; p.genre == form.genre)\n  .author.distinct().sort() : []\n</code></pre> <p>For the series field:</p> <pre><code>form.genre &amp;&amp; form.author ? dv.pages(\"#book\")\n  .where(p =&gt; p.genre == form.genre &amp;&amp; p.author == form.author)\n  .series.distinct().sort() : []\n</code></pre> <p>For the book selection field:</p> <pre><code>form.genre ? dv.pages(\"#book\")\n  .where(p =&gt; \n    p.genre == form.genre &amp;&amp; \n    p.rating &gt;= form.minRating &amp;&amp; \n    (form.author ? p.author == form.author : true) &amp;&amp; \n    (form.series ? p.series == form.series : true)\n  )\n  .sort(p =&gt; p.rating, \"desc\")\n  .file.name : []\n</code></pre>"},{"location":"dependent-dataview-fields/#step-9-adding-multi-select-dependent-fields","title":"Step 9: Adding Multi-select Dependent Fields","text":"<p>For more complex scenarios, you can use multi-select fields with dependencies:</p> <pre><code>dv.pages(\"#book\")\n  .where(p =&gt; p.genre == form.genre)\n  .file.tags\n  .flatMap(t =&gt; t)\n  .distinct()\n  .sort()\n</code></pre>"},{"location":"dependent-dataview-fields/#step-10-saving-and-using-your-form","title":"Step 10: Saving and Using Your Form","text":"<ol> <li>Save your template in the Obsidian vault</li> <li>Create a button, command or hotkey to trigger the template</li> <li>When the template is triggered, it will open the form and create a new note with the selected data</li> </ol>"},{"location":"dependent-dataview-fields/#tips","title":"Tips","text":"<ol> <li>Cascading Dependencies: You can create multiple levels of dependencies (genre \u2192 author \u2192 series \u2192 book)</li> <li>Error Handling: Always check if form fields exist before using them in queries</li> <li>Real-time Updates: Form data is automatically synchronized with your queries</li> </ol>"},{"location":"import-forms/","title":"Importing a form","text":""},{"location":"import-forms/#importing-forms","title":"Importing Forms","text":"<p>Since release 1.40.0 it is possible to import forms from JSON. You can open the import modal from the command palette or from the forms list. The command is called <code>Import Form</code> for the surprise of no one. That will present a simple modal with a text area where you can paste the JSON. Any errors will appear next to the text area if any. Once you fix the errors you can click the <code>Import</code> button which will open the form editor with the imported form. From there you can do any changes you want and save it. </p>"},{"location":"long-list-tip/","title":"TIP: How to put a long list of values in a select without having to type them one by one","text":"<p>When you already have a long list of values that you want in a select input, instead of putting them one by one in the fixed list, you can use the <code>dataview</code> input type and just return the values as an array in the dataview query.</p> <p>For example, you can put the following in a select input with <code>dataview</code> as the source:</p> <pre><code>return [\n    'Wash the dishes',\n    'Take out the trash',\n    'Do the laundry',\n    'Mow the lawn',\n    'Feed the cat',\n    'Feed the dog',\n    'Feed the fish',\n    'Feed the birds',\n    'Feed the turtles',\n    'Feed the rabbits',\n    'Feed the turtles',]\n</code></pre> <p>And the result will be: </p> <p>Here is an screenshot of how it looks in the form builder: </p>"},{"location":"managing-results/","title":"Managing Results","text":"<p>The <code>FormResult</code> class provides methods for accessing and formatting form results.</p> <p>[!TIP] From version <code>1.33.0</code> onwards, the <code>FormResult</code> class allows accessing the values of the form fields  using directly <code>property accessors</code>, like <code>result.title</code> or <code>result.listField</code>. The property accessors are equivalent to calling the <code>get</code> method, so <code>result.title</code> is equivalent to <code>result.get('title')</code>, but it's shorter and more convenient. All the examples in this page continue to use the more explicit ways to access the values, but you can use the property accessors if you prefer.</p> <p>[!IMPORTANT] Accessing the values using <code>property accessors</code> or the <code>getValue</code> method is considered the safer and preferred way to access the values. This is because the returned values are wrapped in a <code>ResultValue</code> object that provides a safer and more convenient interface to render the values in various formats.</p>"},{"location":"managing-results/#asfrontmatterstringoptions-unknown-string","title":"<code>asFrontmatterString(options?: unknown): string</code>","text":"<p>Transforms the current data into a frontmatter string, which is expected to be enclosed in <code>---</code> when used in a markdown file. This method does not add the enclosing <code>---</code> to the string, so you can put it anywhere inside the frontmatter.</p>"},{"location":"managing-results/#parameters","title":"Parameters","text":"<ul> <li> <p><code>options</code> (optional): An options object describing what options to pick or omit.</p> <ul> <li><code>pick</code> (optional): An array of key names to pick from the data.</li> <li><code>omit</code> (optional): An array of key names to omit from the data.</li> </ul> </li> </ul>"},{"location":"managing-results/#returns","title":"Returns","text":"<ul> <li><code>string</code>: The data formatted as a frontmatter string.</li> </ul>"},{"location":"managing-results/#example","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.asFrontmatterString({ pick: [\"title\"] });\n</code></pre>"},{"location":"managing-results/#aliases","title":"Aliases","text":"<p>this method has the following aliases:</p> <ul> <li><code>asFrontmatter</code></li> <li><code>asYaml</code></li> </ul>"},{"location":"managing-results/#asdataviewpropertiesoptions-unknown-string","title":"<code>asDataviewProperties(options?: unknown): string</code>","text":"<p>Returns the current data as a block of dataview properties.</p>"},{"location":"managing-results/#parameters_1","title":"Parameters","text":"<ul> <li> <p><code>options</code> (optional): An options object describing what options to pick or omit.</p> <ul> <li><code>pick</code> (optional): An array of key names to pick from the data.</li> <li><code>omit</code> (optional): An array of key names to omit from the data.</li> </ul> </li> </ul>"},{"location":"managing-results/#returns_1","title":"Returns","text":"<ul> <li><code>string</code>: The data formatted as a block of dataview properties.</li> </ul>"},{"location":"managing-results/#example_1","title":"Example","text":"<pre><code>const result = await form.openForm('my-form')\ntR += result.asDataviewProperties({ pick: ['title'] });`\n</code></pre>"},{"location":"managing-results/#aliases_1","title":"Aliases","text":"<p>This method has the following aliases:</p> <ul> <li><code>asDataview</code></li> <li><code>asDv</code></li> </ul>"},{"location":"managing-results/#getkey-string-mapfn-value-any-any-any","title":"<code>get(key: string, mapFn?: (value: any) =&gt; any): any</code>","text":"<p>Returns the value of the given key. If the key does not exist, returns the empty string <code>\"\"</code>. It takes an optional map function that can be used to transform the value. If the key does not exist, the map function is not called.</p>"},{"location":"managing-results/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code>: The key to get the value of.</li> <li><code>mapFn</code> (optional): A function that takes the value and returns a new value.</li> </ul>"},{"location":"managing-results/#returns_2","title":"Returns","text":"<ul> <li><code>any</code>: The value of the given key.</li> </ul>"},{"location":"managing-results/#example_2","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.get(\"title\");\n</code></pre> <p>Or with a map function:</p> <pre><code>const result = await form.openForm(\"my-form\");\ntR += result.get(\"title\", (value) =&gt; value.toUpperCase());\n</code></pre>"},{"location":"managing-results/#getvaluekey-string-resultvalue-or-getvkey-string-resultvalue","title":"<code>getValue(key: string): ResultValue</code> or <code>getV(key: string): ResultValue</code>","text":"<p>Returns the value of the given key as a <code>ResultValue</code> object.</p>"},{"location":"managing-results/#parameters_3","title":"Parameters","text":"<ul> <li><code>key</code>: The key to get the value of.</li> </ul>"},{"location":"managing-results/#returns_3","title":"Returns","text":"<ul> <li><code>ResultValue</code>: The value of the given key as a <code>ResultValue</code> object.  If the key field doesn't exist or is empty, returns an empty <code>ResultValue</code> object. Thanks to this, you don't need to check if the field exists or is empty because the <code>ResultValue</code> object will handle it for you.</li> </ul>"},{"location":"managing-results/#example_3","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.getValue(\"title\");\ntR += result.getValue(\"listField\").bullets;\n</code></pre> <p>Thanks to <code>property accessors</code>, you can also write the above code in a more convenient way like this:</p> <pre><code>const result = await form.openForm(\"my-form\");\ntR += result.title;\ntR += result.listField.bullets;\n</code></pre> <p>For more details and examples, see the <code>ResultValue</code> documentation.</p>"},{"location":"templates/","title":"Templates","text":"<p>Templates allow you to bind dynamic text outputs to your forms. Forms that have templates binded to them are subject to be used to create new notes or to insert them. If you use either the command to create a new note from a form or the insert form command, after the form is submitted its template will be processed using the form's values to generate the final text. After the form template is processed, if you have the templater plugin installed, the final text will be processed by templater. See the Templater Support section for more information.</p>"},{"location":"templates/#template-syntax","title":"Template Syntax","text":"<p>A template consists of plain text mixed with variables and commands:</p> <ul> <li>Variables: Wrapped in double curly braces <code>{{ }}</code>, they are replaced with form field values</li> <li>Commands: Special instructions wrapped in <code>{{# #}}</code> that control template behavior</li> </ul>"},{"location":"templates/#variables","title":"Variables","text":"<p>Variables are placeholders that get replaced with form field values. The variable name must match a field name from your form:</p> <pre><code>Hello {{name}}! Your favorite color is {{color}}.\n</code></pre>"},{"location":"templates/#basic-variable-syntax","title":"Basic Variable Syntax","text":"<ul> <li>Variable Declaration:</li> </ul> <p><code>plaintext   {{ variableName }}</code></p> <p>Example:</p> <p><code>plaintext   {{ name }}</code></p> <p>Note that spaces around the variable name are ignored, allowing for flexibility in formatting.</p> <pre><code>This is a {{variableName}}. And this is also a valid {{ variableName }}\n</code></pre>"},{"location":"templates/#variable-with-transformations","title":"Variable with Transformations","text":"<ul> <li>Transformation Syntax: You can apply transformations to a variable by using a pipe <code>|</code> followed by the transformation name.</li> </ul> <p><code>plaintext   {{ variableName | transformation }}</code></p> <p>Example:</p> <p><code>plaintext   {{ name | trim }}</code></p>"},{"location":"templates/#supported-transformations","title":"Supported Transformations","text":"<p>The following transformations can be applied to variables:</p> <ol> <li><code>upper</code>: Converts the variable's value to uppercase.</li> <li> <p>Usage:</p> <p><code>plaintext  {{ name | upper }}</code></p> </li> <li> <p><code>lower</code>: Converts the variable's value to lowercase.</p> </li> <li> <p>Usage:</p> <p><code>plaintext  {{ name | lower }}</code></p> </li> <li> <p><code>trim</code>: Removes whitespace from both ends of the variable's value.</p> </li> <li> <p>Usage:</p> <p><code>plaintext  {{ name | trim }}</code></p> </li> <li> <p><code>stringify</code>: Converts the variable's value to a JSON string.</p> </li> <li> <p>Usage:</p> <p><code>plaintext  {{ name | stringify }}</code></p> </li> </ol>"},{"location":"templates/#example-templates","title":"Example Templates","text":"<p>Here are some examples of how to use the new template syntax:</p> <ul> <li>Single Variable:</li> </ul> <p><code>plaintext   Hello, {{ name }}!</code></p> <ul> <li>Variable with Transformation:</li> </ul> <p><code>plaintext   Hello, {{ name | upper }}!</code></p> <ul> <li>Multiple Variables with Transformations:</li> </ul> <p><code>plaintext   Hello, {{ name | trim }}! You are {{ age }} years old.</code></p>"},{"location":"templates/#notes","title":"Notes","text":"<ul> <li>If an invalid transformation is specified, it will be silently ignored, and the variable will be processed without transformation.</li> <li>Spaces around the transformation operator (<code>|</code>) are ignored, allowing for flexibility in formatting:</li> </ul> <p><code>plaintext   {{ name | trim }} or {{ name|trim }} are both valid.</code></p>"},{"location":"templates/#available-commands","title":"Available Commands","text":""},{"location":"templates/#frontmatter-command","title":"Frontmatter Command","text":"<p>The frontmatter command controls which form fields appear in the YAML frontmatter section of your note:</p> <pre><code>{# frontmatter pick: title, tags #}\n</code></pre> <p>Options:</p> <ul> <li><code>pick</code>: Only include these specific fields in the frontmatter</li> <li><code>omit</code>: Exclude these fields from the frontmatter</li> </ul> <p>You can combine both options:</p> <pre><code>{# frontmatter pick: title, tags, date omit: draft #}\n</code></pre> <p>If no options are specified, all form fields will be included in the frontmatter:</p> <pre><code>{# frontmatter #}\n</code></pre>"},{"location":"templates/#templater-support","title":"Templater Support","text":"<p>If you have the Templater plugin installed, Modal Form will also process any templater syntax in your form templates. This means you can combine both the form template variables and templater syntax in your templates.</p> <p>For example:</p> <pre><code>Hello {{NAME}},\nToday is &lt;% tp.date.now() %&gt; and you are using form templates!\n</code></pre> <p>The form will first replace <code>{{NAME}}</code> with the value from your form, and then Templater will process its own syntax (like <code>&lt;% tp.date.now() %&gt;</code>) afterwards.</p> <p>Note: This feature is only available if you have the Templater plugin installed and enabled in your vault.</p>"},{"location":"templates/#example","title":"Example","text":"<p>Here's a complete template example that combines variables and frontmatter:</p> <pre><code>{# frontmatter pick: title, tags #}\n\n# {{title}}\n\nDear {{name}},\n\nThank you for your {{type}} submission about {{topic}}.\n\nBest regards,\n{{signature}}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/06/15/release-notes-for-1460/","title":"Release notes for 1.46.0","text":"<p>This release contains one little change that was easy to make, but I think that it unlocks a very interesting use case for modal forms. There is a not very well documented feature in the FormEditor that allows to define a specific (and simple) template linked to that form. I implemented it partially for fun, because I love coding parsers but also partially because many times I only need very basic templating functionality and I don't want to have to write another templater template. Also, I find very appealing the idea of having both the form and the template visible and linked in the same place, which is not the case when you use templater templates. Up until now, the only thing you can use this templates for was for creating new notes from that template. You trigger a command, select the form to use, fill it and the template is used to create the note.</p> <p>But I find myself many times defining a very simple for for easier the insertion of certain data in an existing note. However, for that I was forced to first create the form then create a templater template that uses that form (whith all the boilerplate it entails) and then either tell templater to create a command for that template or use the insert template from templater command. When I saw how easy is to create commands that insert text in the current note I thought it was a no brainer to not take advantage of that with the form templates.</p> <p>So that is the little but big improvement in this release. You can now use the form templates to insert text in the current note at the cursor position.</p> <p>To give an example, I have a very simple form for inserting an external link. While the experience of doing this in the Obsidian desktop app is fine, it is a bit tedious to do on mobile.</p> <p>My form looks as simple as this: </p> <p>And the template is also very simple, just:</p> <pre><code>[{{title}}]({{url}})\n</code></pre> <p>Now, I can trigger a command that will insert the template in the current note at the cursor position after filling and submitting the form.</p> <p>Hope you find this useful. I'm already using it a lot.</p>","tags":["release-notes"]},{"location":"blog/2024/06/22/release-notes-for-1470-and-a-statement-of-intent/","title":"Release notes for 1.47.0 and a statement of intent","text":"","tags":["release-notes"]},{"location":"blog/2024/06/22/release-notes-for-1470-and-a-statement-of-intent/#release-notes-for-1470","title":"Release notes for 1.47.0","text":"<p>This is mostly a technical release that also includes some minor improvements.</p> <p>The technical part of it is that now the fields of the form are rendered using svelte rather than manually calling DOM manipulation methods or the obsidian <code>Setting</code> class. I made this because it simplifies the creation of the view, it will be more maintainable, but the most important reason is that it will make much much easier to implement functionalities that require atomic re-renders of the form. The most important and requested feature this will enable is the ability to have dynamic fields that depend on the value of other fields. This is not implemented yet, but it will be much easier to do now and I will start working on it soon.</p> <p>For the minor improvements, I added some more color to the form fields, so now the stars that indicate required fields are colorful.</p> <p></p> <p>I also improved the error messages when submitting a form with errors. Now the error message appears below the field in red color:</p> <p></p> <p>Also related to errors, the notifications that appear when submitting a form with errors are now grouped in a single notification containing all the errors:</p> <p></p>","tags":["release-notes"]},{"location":"blog/2024/06/22/release-notes-for-1470-and-a-statement-of-intent/#statement-of-intent","title":"Statement of intent","text":"<p>When I started this project, I had not much experience with Obsidian and absolute no experience with Obsidian plugin development. Also, my initial idea was to create a very simple plugin, basically something wrapping some basic existing Obsidian functionality and glueing it with some other tools I like to use (templater mainly) while making the process streamlined and more user friendly. Since then, the plugin has gained a lot of popularity, it has some thousand of installs, making it my most popular project by far. Coming from a web development background, I was imposing myself some limitations that I learned that do not make any sense in Obsidian. For example, at first I was very worried about the bundle size of the plugin (which is still very small) and I was trying to avoid using external libraries as much as possible. However, some of the most popular plugins weight several MBs and nobody seems to care. Also, many plugins diverge significantly from the Obsidian default appearance, and that is not a problem at all. What does that mean for modal form? That I will try to build better functionalities, always trying to keep the plugin simple and focused, but I will no longer limit myself to what Obsidian offers out of the box, and I will not be afraid of using external libraries if they make sense.</p> <p>Hope you like the direction I'm taking with the plugin. I'm very excited about the future of it.</p>","tags":["release-notes"]},{"location":"blog/2024/07/02/release-notes-for-1480/","title":"Release notes for 1.48.0","text":"<p>This is a very exciting release for me, because it includes one of the features that I have been wanting to implement for a long time, and also one of the most requested features. But it also includes some minor improvements, so let's take those first:</p> <ul> <li>The placeholder of the label is set by default to the name of the field. This will make it easier for people to understand that the default label value is the name of the field. </li> </ul> <p>Now the big feature:</p>","tags":["release-notes"]},{"location":"blog/2024/07/02/release-notes-for-1480/#conditional-fields","title":"Conditional fields","text":"<p>As with every new feature, I like to start small, so this first version is very simple. It just settles the basic foundation and works only with the most basic field types. This will allow me to gather feedback and improve it in the next releases after making sure that the basic functionality is working as expected.</p> <p>In this first approach there are not many safeguards either, so you can end up in forms that don't show any field, for example because of fields that are excluding each other. I don't think this is going to be a big problem in practice, but I will be monitoring the feedback to see if it is necessary to add some kind of validation, or at least some kind of warning. The reason I am not adding it any limitations in this first version is because flexibility: forms can be called with parameters to omit fields, default values, etc. and I don't want to limit that flexibility.</p> <p>Here are some screenshots of the feature in action.</p> <p>Form builder:  </p> <p>Form in preview mode with the condition met  with the condition not met </p> <p>This first iteration is purely visual: just because a field is hidden it does not mean that, if it has a value, is not going to be included in the result. If you fill a field, and then do something that makes it hidden, the value will still be included in the result. I think in practice most people just needs a way to start with several fields hidden, and then show them based on the value of other fields, so I think this is a good first approach.</p> <p>The wording of the feature is not final, I'm not very satisfied with the current wording, so I'm open to suggestions. I hope you like it, that it does not introduce too many inconveniences and that it is useful to you.</p> <p>Please let me know your thoughts and suggestions.</p>","tags":["release-notes"]},{"location":"blog/2024/09/12/release-notes-for-1510/","title":"Release notes for 1.51.0","text":"","tags":["release-notes"]},{"location":"blog/2024/09/12/release-notes-for-1510/#hidden-fields","title":"Hidden fields","text":"<p>This release introduces the concept of hidden fields. The intended usage of this feature is to provide values to the form that are not visible to the user. This has some applications such as:</p> <ul> <li>providing variables to the form-runtime that your dataview functions can use</li> <li>having certain fields deactivated using the conditional without any user interaction</li> <li>having certain values be part of the generated result, and used in the templates</li> </ul> <p>I bet the community will be able to figure out some other interesting use-cases. The reason I like this approach to much is a) because it is a web standard (this is common practice to communicate between backend and frontend in forms) and b) it plays nicely with all the existing form mechanisms without having to complicate the logic at all: formatting the output, reading the value from dataview functions, conditional rendering other fields, etc.</p> <p>Hope you like it and find it useful.</p>","tags":["release-notes"]},{"location":"blog/2024/09/29/release-notes-for-1520/","title":"Release notes for 1.52.0","text":"","tags":["release-notes"]},{"location":"blog/2024/09/29/release-notes-for-1520/#markdown-block","title":"Markdown block","text":"<p>This release introduces a new input, the \"markdown block\". Just like the existing \"document block\" this is not a real input, but more a building block for richer forms. The definition is expected to contain a function body returning a markdown string. This markdown string will then be rendered into the form and the user filling it will be able to see it.</p> <p>To illustrate with an example, imagine a simple form with a single text input, we can define a markdown block with this content:</p> <pre><code>return `# hello\n- line 1\n- ${form.text}\n- ![[image.png]]`\n</code></pre> <p>Have you noticed the image syntax? Yes, images are supported too. This is how it looks once rendered: </p>","tags":["release-notes"]},{"location":"blog/2024/09/29/release-notes-for-1520/#updates-to-the-existing-document-block","title":"Updates to the existing document block","text":"<p>Both Markdown block and document block now have access to the dataview API (along with the form data itself). This allows to build much complex and data packed information panels. To access the dataview API, you do normally just like in any other place using a special variable named <code>dv</code>. For example, and continuing with the markdown example, we could render a list of all the people (in markdown) using dataview like this:</p> <pre><code>return dv.markdownList(dv.pages('#person').map(x =&gt; x.file.name))\n</code></pre> <p>That will render something like this: </p>","tags":["release-notes"]},{"location":"blog/2024/12/09/release-notes-for-1530/","title":"Release notes for 1.53.0","text":"","tags":["release-notes"]},{"location":"blog/2024/12/09/release-notes-for-1530/#introducing-image-input","title":"Introducing Image Input","text":"<p>This release introduces a brand new input type: the image input! This new component allows you to upload images directly through your forms, automatically saving them to your vault. I'm particularly excited about this new feature because I already have a lot of usecases for it on my daily life (I like to keep a record of the restaurants I visit and the meals I eat there). The possibilities it opens are big and I'm really excited about seeing what new and more visual experiences you can create using it. I also think that having a specialized way of adding images to your notes/templates is better than the obsidian way in a lot of situations.</p>","tags":["release-notes"]},{"location":"blog/2024/12/09/release-notes-for-1530/#whats-new","title":"What's New","text":"<p>The image input is a powerful new addition to our form inputs family that lets you:</p> <ul> <li>Save images directly to your vault</li> <li>Preview the image</li> <li>Atomically define where each image will be saved for each input</li> <li>Use templates for file naming with date/time placeholders</li> </ul> <p>Here's how it looks in action: </p> <p>There is also a new helper in the FormResult object that simplifies the creation of markdown links to the image. For example, if you have a field called <code>image</code> in your form result, you can use it like this in your templates:</p> <pre><code>&lt;% result.image.link %&gt;\n</code></pre>","tags":["release-notes"]},{"location":"blog/2024/12/09/release-notes-for-1530/#using-the-image-input","title":"Using the Image Input","text":"<p>Adding an image input to your form is very straightforward using the FormBuilder. Here's an example screenshot: </p> <p>The configuration has two main settings:</p> <ul> <li><code>filenameTemplate</code>: Define how your files will be named. You can use placeholders like <code>{{date}}</code>, <code>{{time}}</code>, or <code>{{datetime}}</code>.</li> <li><code>saveLocation</code>: Specify where in your vault the image will be saved. Don't worry if the folder doesn't exist - it will be created automatically!</li> </ul>","tags":["release-notes"]},{"location":"blog/2024/12/09/release-notes-for-1530/#drawbacks","title":"Drawbacks","text":"<p>As with every first version of every new feature, there is an important drawback: the image input is eager to save the image. This means that the image will be saved as soon as you select it, even if the form is not submitted, or if you pick a different image. This is a tradeoff that simplified the implementation and makes some scenarios simpler , like using the image in a markdown block or in other dynamic inputs.</p> <p>It is also worth mentioning that the value you get in the form result is not a TFile directly but a wrapped TFile object. This is because a lot of places assume it is safe to just serialize the form results to JSON, which is not the case for the TFile object. The wrapped TFile object has direct access to the most essential properties of the file, like <code>path</code>, <code>name</code>, <code>basename</code>, and <code>extension</code>. The wrapped TFile is also available through the <code>TFile</code> property in the wrapping class <code>FileProxy</code>.</p> <p>Here is an example of how you can use the wrapped TFile object:</p> <pre><code>const result = await MF.openForm(\"my-form\");\n// assuming your image input is called \"image\"\nconst file = result.image.value.TFile;\n- ctime: &lt;% file.stat.ctime %&gt;\n- mtime: &lt;% file.stat.mtime %&gt;\n- size: &lt;% file.stat.size %&gt;\n</code></pre>","tags":["release-notes"]},{"location":"blog/2024/12/19/release-notes-for-1560/","title":"Release notes for 1.56.0","text":"","tags":["release-notes"]},{"location":"blog/2024/12/19/release-notes-for-1560/#templates-now-support-templater-syntax","title":"Templates now support Templater syntax","text":"<p>Modal Form 1.56.0 enhances its templates feature with Templater support! I'm particularly excited about this integration because, with a little addition we are greatly improving the usability of this plugin, but also Templater. Now binding a particular form to a complex template is easier than ever, knowing the fields available in the template also becomes a lot easier and I think the overall experience is greatly improved.</p> <p></p>","tags":["release-notes"]},{"location":"blog/2024/12/19/release-notes-for-1560/#whats-new","title":"What's New","text":"<p>The Templater integration adds the following capabilities to form templates:</p> <ul> <li>Use Templater syntax (<code>&lt;% %&gt;</code>) inside form templates</li> <li>Process dates, files, and system information through Templater</li> <li>Automatic processing of Templater syntax after form variables are replaced</li> </ul> <p>Here's a little example combining both syntaxes:</p> <pre><code>---\ncreated: &lt;% tp.date.now() %&gt;\n---\n\nDear {{name}},\n\nMeeting scheduled for &lt;% tp.date.now(\"MMMM Do, YYYY\") %&gt;\nLocation: {{location}}\n\nBest regards,\n{{signature}}\n</code></pre>","tags":["release-notes"]},{"location":"blog/2024/12/19/release-notes-for-1560/#how-it-works","title":"How it Works","text":"<p>The template processing now happens in two stages:</p> <ol> <li>First, Modal Form replaces all form variables (the <code>{{variable}}</code> syntax)</li> <li>Then, if Templater is available, it processes any Templater syntax in the resulting text</li> </ol>","tags":["release-notes"]},{"location":"blog/2024/12/19/release-notes-for-1560/#retry-functionality","title":"Retry Functionality","text":"<p>Getting templater templates right at the first try can be hard, that's why we added a retry option when templater processing part fails. If something goes wrong during templater processing , Modal Form now provides a retry modal where you can try to fix the template and try again.:</p> <p></p> <p>This makes it easier to fix any issues without losing your form data and gives you an insight on how te template is processed.</p> <p>Check out the templates documentation for more details and examples of how to use this new feature.</p>","tags":["release-notes"]},{"location":"blog/2024/12/12/modal-form-showcase-thread/","title":"Modal form showcase thread","text":"<p>Hello everyone.</p> <p>I've created this thread so people can share their awesome workflows using modal forms.</p> <p>A lot of times people that open feature requests mention they need such feature to complete their workflow, or that such feature will make their workflow simpler, and then they mention what their workflow is about and then blow my mind.</p> <p>I saw other plugins also have similar threads, so I decided to create this one to encourage people to share their forms and how are they using them.</p> <p>Anyone is free to provide their experiences however they want, but here are some suggestions that I think will make each post even more useful for everyone:</p> <ul> <li>Start the thread with a summary of the workflow or the problem you are solving.</li> <li>If you can, export your form as a JSON file and share it in the thread using a code block. This will make it easier for others to use your form.</li> <li>If you can, share a screenshot of your form. This will make it easier for others to understand what your form looks like and makes it a lot more engaging.</li> <li>If you are calling the form from a template, please share the template as well in another code block.</li> <li>If you are okay about including your post as part of the example vault on modal form repository, please say so, then others just looking at the plugin repository can see your example.</li> </ul> <p>And that's all. I'm very excited about seeing all the different workflows and how you use modal forms, and I hope this will be a great way to share and learn from each other.</p>","tags":["announcement"]},{"location":"blog/archive/2024/","title":"2024","text":""}]}