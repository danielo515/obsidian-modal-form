import builtins from "builtin-modules";
import esbuild from "esbuild";
import esbuildSvelte from "esbuild-svelte";
import fs from "node:fs";
import process from "process";
import sveltePreprocess from "svelte-preprocess";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const config = {
    banner: {
        js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    metafile: true,
    plugins: [
        esbuildSvelte({
            compilerOptions: { css: "injected" },
            preprocess: sveltePreprocess(),
        }),
    ],
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins,
    ],
    format: "cjs",
    target: "es2019",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    define: {
        "process.env.NODE_ENV": JSON.stringify(prod ? "production" : "development"),
    },
};

if (prod) {
    const context = await esbuild.context(config);
    const result = await context.rebuild();
    fs.writeFileSync("meta.json", JSON.stringify(result.metafile));
    process.exit(0);
} else {
    const context = await esbuild.context({
        ...config,
        outfile: "EXAMPLE_VAULT/.obsidian/plugins/modal-form/main.js",
    });
    await context.watch();
}
